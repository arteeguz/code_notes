2. Models/ScanResult.cs
csharp// Models/ScanResult.cs
namespace NetworkScanner.API.Models
{
    /// <summary>
    /// Represents the result of a machine scan
    /// </summary>
    public class ScanResult
    {
        // Basic machine information
        public string? IpAddress { get; set; }
        public string? Hostname { get; set; }
        public string? RamSize { get; set; }
        
        // Scan status information
        public string? Status { get; set; }
        public string? ErrorMessage { get; set; }
    }

    /// <summary>
    /// Represents a request to scan a machine
    /// </summary>
    public class ScanRequest
    {
        public required string IpAddress { get; set; }
    }
}
3. Services/NetworkScannerService.cs
csharp// Services/NetworkScannerService.cs
using System.Management;
using NetworkScanner.API.Models;

namespace NetworkScanner.API.Services
{
    public class NetworkScannerService
    {
        private readonly string _adminUsername;
        private readonly string _adminPassword;

        public NetworkScannerService(IConfiguration configuration)
        {
            // ADMIN CREDENTIALS: 
            // Option 1: Use appsettings.json (preferred for development)
            _adminUsername = configuration["AdminCredentials:Username"] ?? "admin";
            _adminPassword = configuration["AdminCredentials:Password"] ?? "adminPassword";
            
            // Option 2: Hard-code credentials (not recommended, but simple)
            // _adminUsername = "domain\\adminuser"; // Use actual domain admin user
            // _adminPassword = "actualPassword";    // Use actual password
            
            // Option 3: Environment variables (good for production)
            // _adminUsername = Environment.GetEnvironmentVariable("SCANNER_ADMIN_USER") ?? "admin";
            // _adminPassword = Environment.GetEnvironmentVariable("SCANNER_ADMIN_PASS") ?? "adminPassword";
        }

        /// <summary>
        /// Scans a Windows machine and retrieves basic system information
        /// </summary>
        public ScanResult ScanMachine(string ipAddress)
        {
            var result = new ScanResult
            {
                IpAddress = ipAddress,
                Status = "pending"
            };

            try
            {
                // Set up connection options with admin credentials for WMI
                ConnectionOptions connectionOptions = new ConnectionOptions
                {
                    Username = _adminUsername,
                    Password = _adminPassword,
                    Impersonation = ImpersonationLevel.Impersonate,
                    Authentication = AuthenticationLevel.PacketPrivacy,
                    EnablePrivileges = true
                };

                // Create management scope for remote connection
                ManagementScope scope = new ManagementScope($"\\\\{ipAddress}\\root\\cimv2", connectionOptions);
                scope.Connect();

                // Get hostname information from the remote machine
                ObjectQuery hostnameQuery = new ObjectQuery("SELECT Name FROM Win32_ComputerSystem");
                ManagementObjectSearcher hostnameSearcher = new ManagementObjectSearcher(scope, hostnameQuery);
                foreach (ManagementObject obj in hostnameSearcher.Get())
                {
                    result.Hostname = obj["Name"]?.ToString();
                    break;
                }

                // Get RAM size information from the remote machine
                ObjectQuery ramQuery = new ObjectQuery("SELECT TotalPhysicalMemory FROM Win32_ComputerSystem");
                ManagementObjectSearcher ramSearcher = new ManagementObjectSearcher(scope, ramQuery);
                foreach (ManagementObject obj in ramSearcher.Get())
                {
                    if (obj["TotalPhysicalMemory"] != null && ulong.TryParse(obj["TotalPhysicalMemory"].ToString(), out ulong totalMemoryBytes))
                    {
                        double totalMemoryGB = totalMemoryBytes / (1024.0 * 1024.0 * 1024.0);
                        result.RamSize = $"{totalMemoryGB:F2} GB";
                    }
                    break;
                }

                // Set success status if we reach this point
                result.Status = "success";
            }
            catch (Exception ex)
            {
                // Handle any errors that occurred during scanning
                result.Status = "error";
                result.ErrorMessage = ex.Message;
            }

            return result;
        }
    }
}
4. Program.cs (Modified to Remove Authentication)
csharp// Program.cs
using NetworkScanner.API.Services;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

// Add CORS to allow React frontend to connect
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowReactApp", 
        builder => builder
            .WithOrigins("http://localhost:3000")
            .AllowAnyMethod()
            .AllowAnyHeader()
            .AllowCredentials());
});

// Register our scanner service
builder.Services.AddScoped<NetworkScannerService>();

// Note: We removed the authentication services as discussed

var app = builder.Build();

// Configure the HTTP request pipeline
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();
app.UseCors("AllowReactApp");

// Note: Removed authentication/authorization middleware
app.MapControllers();

app.Run();
5. Controllers/ScannerController.cs
csharp// Controllers/ScannerController.cs
using Microsoft.AspNetCore.Mvc;
using NetworkScanner.API.Models;
using NetworkScanner.API.Services;

namespace NetworkScanner.API.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class ScannerController : ControllerBase
    {
        private readonly NetworkScannerService _scannerService;
        private readonly ILogger<ScannerController> _logger;

        public ScannerController(NetworkScannerService scannerService, ILogger<ScannerController> logger)
        {
            _scannerService = scannerService;
            _logger = logger;
        }

        /// <summary>
        /// Endpoint to scan a machine by IP address
        /// </summary>
        [HttpPost("scan")]
        public IActionResult ScanMachine([FromBody] ScanRequest request)
        {
            if (string.IsNullOrEmpty(request.IpAddress))
            {
                return BadRequest("IP address is required");
            }

            _logger.LogInformation($"Scanning machine at IP: {request.IpAddress}");
            var result = _scannerService.ScanMachine(request.IpAddress);
            
            return Ok(result);
        }
    }
}
6. appsettings.json
json{
  "AdminCredentials": {
    "Username": "domain\\adminuser",
    "Password": "actualPassword"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}
Frontend (React) Files
1. Install Dependencies
bashcd ../network-scanner-ui
npm install axios bootstrap react-bootstrap
2. src/components/ScannerForm.tsx (Modified to Remove Auth)
tsx// src/components/ScannerForm.tsx
import React, { useState } from 'react';
import { Form, Button, Card, Spinner, Alert } from 'react-bootstrap';
import axios from 'axios';

// Define the shape of scan results from API
interface ScanResult {
  ipAddress: string;
  hostname: string;
  ramSize: string;
  status: string;
  errorMessage?: string;
}

const ScannerForm: React.FC = () => {
  // State management
  const [ipAddress, setIpAddress] = useState('');
  const [scanResults, setScanResults] = useState<ScanResult | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    
    try {
      // Call the API to scan the machine
      // Note: Adjust the port to match your .NET app
      const response = await axios.post(
        'https://localhost:7001/api/scanner/scan', 
        { ipAddress }
        // No auth object needed since we removed authentication
      );
      
      setScanResults(response.data);
    } catch (err: any) {
      console.error('Error scanning:', err);
      setError(err.response?.data || 'Failed to scan machine. Check console for details.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Card className="mt-4">
      <Card.Header as="h5">Network Scanner</Card.Header>
      <Card.Body>
        {/* IP Input Form */}
        <Form onSubmit={handleSubmit}>
          <Form.Group className="mb-3">
            <Form.Label>IP Address</Form.Label>
            <Form.Control
              type="text"
              placeholder="Enter IP address to scan"
              value={ipAddress}
              onChange={(e) => setIpAddress(e.target.value)}
              required
            />
          </Form.Group>
          
          <Button variant="primary" type="submit" disabled={loading}>
            {loading ? (
              <>
                <Spinner as="span" animation="border" size="sm" role="status" aria-hidden="true" />
                {' '}Scanning...
              </>
            ) : (
              'Scan Machine'
            )}
          </Button>
        </Form>
        
        {/* Error Display */}
        {error && (
          <Alert variant="danger" className="mt-3">
            {error}
          </Alert>
        )}
        
        {/* Results Display */}
        {scanResults && !error && (
          <div className="mt-4">
            <h5>Scan Results</h5>
            <table className="table table-bordered">
              <thead>
                <tr>
                  <th>Property</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>IP Address</td>
                  <td>{scanResults.ipAddress}</td>
                </tr>
                <tr>
                  <td>Hostname</td>
                  <td>{scanResults.hostname}</td>
                </tr>
                <tr>
                  <td>RAM Size</td>
                  <td>{scanResults.ramSize}</td>
                </tr>
                <tr>
                  <td>Status</td>
                  <td>{scanResults.status}</td>
                </tr>
              </tbody>
            </table>
          </div>
        )}
      </Card.Body>
    </Card>
  );
};

export default ScannerForm;
3. src/App.tsx
tsx// src/App.tsx
import React from 'react';
import { Container, Row, Col, Navbar } from 'react-bootstrap';
import ScannerForm from './components/ScannerForm';
import 'bootstrap/dist/css/bootstrap.min.css';

function App() {
  return (
    <div className="App">
      {/* Navigation Bar */}
      <Navbar bg="dark" variant="dark">
        <Container>
          <Navbar.Brand>Network Scanner</Navbar.Brand>
        </Container>
      </Navbar>
      
      {/* Main Content */}
      <Container>
        <Row className="justify-content-md-center">
          <Col md={8}>
            <ScannerForm />
          </Col>
        </Row>
      </Container>
    </div>
  );
}

export default App;
Running the Application
bash# Terminal 1 - Backend
cd NetworkScanner.API
dotnet run

# Terminal 2 - Frontend
cd network-scanner-ui
npm start
Admin Credentials Security Best Practices
For actual admin credentials, you have three main options:

appsettings.json (Development only):

Easy to change but not secure for production
Keep this file out of source control


Environment Variables (Recommended for production):

Set them in your hosting environment
Example: SCANNER_ADMIN_USER and SCANNER_ADMIN_PASS
Access via Environment.GetEnvironmentVariable("VARIABLE_NAME")


Secret Manager (Good for development):

Use dotnet user-secrets command
No secrets in source code
Reference: https://learn.microsoft.com/en-us/aspnet/core/security/app-secrets



Never commit actual credentials to source control. If you need to share this code, use placeholder values and document where actual values should be placed.
